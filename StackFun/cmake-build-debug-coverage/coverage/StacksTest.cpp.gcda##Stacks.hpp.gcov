        -:    0:Source:C:/Users/lavab/CLionProjects/StackFun/Stacks.hpp
        -:    0:Graph:C:\Users\lavab\CLionProjects\StackFun\cmake-build-debug-coverage\CMakeFiles\StackFun.dir\StacksTest.cpp.gcno
        -:    0:Data:C:\Users\lavab\CLionProjects\StackFun\cmake-build-debug-coverage\CMakeFiles\StackFun.dir\StacksTest.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <vector>
        -:    2:#include <cstdlib>
        -:    3:#include <string>
        -:    4:
        -:    5:#ifndef STACKS_HPP
        -:    6:#define STACKS_HPP
        -:    7:using namespace std;
        -:    8:
        -:    9:// Stack is an abstract class because it has all pure virtual
        -:   10:// functions.  This is the equivalent to the Java interface
        -:   11:template<typename Type>
        -:   12:class Stack {
        -:   13:public:
        -:   14:    virtual void push (Type const &) = 0; // push element
        -:   15:    virtual Type pop () = 0; // return top element & remove
        -:   16:    virtual Type top () const = 0;  // return top el
        -:   17:    virtual bool isEmpty () const = 0;  // return true
        -:   18:};
        -:   19:/*
        -:   20: *
        -:   21: */
        -:   22:
        -:   23:
        -:   24://///////// VectorStack //////////////
        -:   25:template<class Type>
        -:   26:class VectorStack : Stack<Type> {
        -:   27:private :
        -:   28:    vector<Type> elems{};
        -:   29:public:
function _ZN11VectorStackIiE4pushERKi called 2 returned 100% blocks executed 100%
        2:   30:    void push (Type const &elem) override{
        2:   31:        elems.push_back(elem);
        2:   31-block  0
call    0 returned 2
        2:   32:    }
function _ZN11VectorStackIiE3popEv called 1 returned 100% blocks executed 100%
        1:   33:    Type pop () override {
        1:   34:        Type temp = elems.back();
        1:   34-block  0
call    0 returned 1
        1:   35:        elems.pop_back();
call    0 returned 1
        1:   36:        return temp;
        -:   37:    }
function _ZNK11VectorStackIiE3topEv called 2 returned 100% blocks executed 100%
        2:   38:    Type top () const override {
        2:   39:        return elems.back();
        2:   39-block  0
call    0 returned 2
        -:   40:    }
function _ZNK11VectorStackIiE7isEmptyEv called 2 returned 100% blocks executed 100%
        2:   41:    bool isEmpty() const override{
        2:   42:        return elems.empty();
        2:   42-block  0
call    0 returned 2
        -:   43:    }
        -:   44:};
        -:   45:
        -:   46:
        -:   47://////////// ArrayStack //////////////
        -:   48:template<class Type>
        -:   49:class ArrayStack : Stack<Type> {
        -:   50:private:
        -:   51:   Type data[1000];
        -:   52:   int index = -1;
        -:   53:public:
function _ZN10ArrayStackIiE4pushERKi called 2 returned 100% blocks executed 100%
        2:   54:    void push (Type const &elem) override{
        2:   55:        index++;
        2:   56:        data[index] = elem;
        2:   57:    }
function _ZN10ArrayStackIiE3popEv called 1 returned 100% blocks executed 100%
        1:   58:    Type pop () override {
        1:   59:        int temp = index;
        1:   60:        index--;
        1:   61:        return data[temp];
        1:   61-block  0
        -:   62:    }
function _ZNK10ArrayStackIiE3topEv called 2 returned 100% blocks executed 100%
        2:   63:    Type top () const override {
        2:   64:        return data[index];
        2:   64-block  0
        -:   65:    }
function _ZNK10ArrayStackIiE7isEmptyEv called 2 returned 100% blocks executed 100%
        2:   66:    bool isEmpty() const override{
        2:   67:        return index == -1;
        2:   67-block  0
        -:   68:    }
        -:   69:};
        -:   70:
        -:   71:
        -:   72:///////// LinkedStack
        -:   73:template<class Type>
        -:   74:class LinkedStack : Stack<Type> {
        -:   75:  struct Node{
        -:   76:      Type data;
        -:   77:      Node *next;
        -:   78:
function _ZN11LinkedStackIiE4NodeC1ERKiPS1_ called 2 returned 100% blocks executed 100%
        2:   79:      Node (Type const & element, Node *nextRef) {
        2:   80:          data = element;
        2:   81:          next = nextRef;
        2:   82:      }
        -:   83:  };
        -:   84:private:
        -:   85:    Node *tail = nullptr;
        -:   86:public:
function _ZN11LinkedStackIiE4pushERKi called 2 returned 100% blocks executed 100%
        2:   87:    void push (Type const &elem) override{
        2:   88:        Node *newNode = new Node(elem, tail);
        2:   88-block  0
call    0 returned 2
call    1 returned 2
        2:   89:        tail = newNode;
        2:   90:    }
function _ZN11LinkedStackIiE3popEv called 1 returned 100% blocks executed 100%
        1:   91:    Type pop () override {
        1:   92:        Type temp = tail->data;
        1:   93:        tail = tail->next;
        1:   94:        return temp;
        1:   94-block  0
        -:   95:    }
function _ZNK11LinkedStackIiE3topEv called 2 returned 100% blocks executed 100%
        2:   96:    Type top () const override {
        2:   97:        return tail->data;
        2:   97-block  0
        -:   98:    }
function _ZNK11LinkedStackIiE7isEmptyEv called 2 returned 100% blocks executed 100%
        2:   99:    bool isEmpty() const override{
        2:  100:        return tail == nullptr;
        2:  100-block  0
        -:  101:    }
        -:  102:
        -:  103:};
        -:  104:
        -:  105:
        -:  106:#endif
