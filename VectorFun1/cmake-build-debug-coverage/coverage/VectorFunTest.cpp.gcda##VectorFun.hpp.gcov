        -:    0:Source:C:/Users/lavab/CLionProjects/VectorFun1/VectorFun.hpp
        -:    0:Graph:C:\Users\lavab\CLionProjects\VectorFun1\cmake-build-debug-coverage\CMakeFiles\VectorFun1.dir\VectorFunTest.cpp.gcno
        -:    0:Data:C:\Users\lavab\CLionProjects\VectorFun1\cmake-build-debug-coverage\CMakeFiles\VectorFun1.dir\VectorFunTest.cpp.gcda
        -:    0:Runs:1
        -:    1:/*
        -:    2: * VectorFun.hpp
        -:    3: *
        -:    4: * This cpp file will implement ten functions related by the fact that CSC 382
        -:    5: * students are learning how to do vector processing and use and write template
        -:    6: * functions. There are several silly contrived methods, some actually helpful
        -:    7: * like FizzBuzz, a question asked in job interviews that 90% of graduates can't do.
        -:    8: *
        -:    9: * @Programmers Rick Mercer and Andrew Tapia
        -:   10: */
        -:   11:#ifndef SRC_VECTORFUN_HPP_
        -:   12:#define SRC_VECTORFUN_HPP_
        -:   13:
        -:   14:#include <string>
        -:   15:#include <vector>
        -:   16:
        -:   17:using namespace std;
        -:   18:
        -:   19:// Completely write template function numberOfPairs, including
        -:   20:// the function heading, to return the number of times a pair
        -:   21:// occurs in vec. A pair is any two elements that are equal at
        -:   22:// consecutive vector indexes. The vector may be empty or have
        -:   23:// only one element. In both of these cases, return 0.
        -:   24://
        -:   25://    vector<int> v1{1, 2, 3, 2, 1};
        -:   26://    numberOfPairs(v1)) returns 0
        -:   27://
        -:   28://    vector<string> v2{"a", "b", "b", "b"};
        -:   29://    numberOfPairs(v2)) returns 2
        -:   30://
        -:   31:// Precondition T must overload ==
        -:   32:template<typename T>
        3:   33:int numberOfPairs(vector<T> &vec) {
        3:   34:    int number_of_pairs = 0;
        -:   35:    // Empty case and 1 item case.
        3:   36:    if (vec.size() < 2) {
       1*:   37:        return 0;
        -:   38:    }
        -:   39:    // Case for 2+ items
        7:   40:    for (int i = 0; i < vec.size() - 1; i++) {
        5:   41:        if (vec.at(i) == vec.at(i + 1)) {
       2*:   42:            number_of_pairs++;
        -:   43:        }
        -:   44:    }
        2:   45:    return number_of_pairs;
        -:   46:
        -:   47:}
------------------
_Z13numberOfPairsIiEiRSt6vectorIT_SaIS1_EE:
function _Z13numberOfPairsIiEiRSt6vectorIT_SaIS1_EE called 1 returned 100% blocks executed 85%
        1:   33:int numberOfPairs(vector<T> &vec) {
        1:   34:    int number_of_pairs = 0;
        -:   35:    // Empty case and 1 item case.
        1:   36:    if (vec.size() < 2) {
        1:   36-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    #####:   37:        return 0;
    %%%%%:   37-block  0
        -:   38:    }
        -:   39:    // Case for 2+ items
        3:   40:    for (int i = 0; i < vec.size() - 1; i++) {
        1:   40-block  0
        2:   40-block  1
        3:   40-block  2
call    0 returned 3
branch  1 taken 2
branch  2 taken 1 (fallthrough)
        2:   41:        if (vec.at(i) == vec.at(i + 1)) {
        2:   41-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 0 (fallthrough)
branch  3 taken 2
    #####:   42:            number_of_pairs++;
    %%%%%:   42-block  0
        -:   43:        }
        -:   44:    }
        1:   45:    return number_of_pairs;
        1:   45-block  0
        -:   46:
        -:   47:}
------------------
_Z13numberOfPairsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEiRSt6vectorIT_SaIS7_EE:
function _Z13numberOfPairsINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEiRSt6vectorIT_SaIS7_EE called 2 returned 100% blocks executed 100%
        2:   33:int numberOfPairs(vector<T> &vec) {
        2:   34:    int number_of_pairs = 0;
        -:   35:    // Empty case and 1 item case.
        2:   36:    if (vec.size() < 2) {
        2:   36-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   37:        return 0;
        1:   37-block  0
        -:   38:    }
        -:   39:    // Case for 2+ items
        4:   40:    for (int i = 0; i < vec.size() - 1; i++) {
        1:   40-block  0
        3:   40-block  1
        4:   40-block  2
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:   41:        if (vec.at(i) == vec.at(i + 1)) {
        3:   41-block  0
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 2 (fallthrough)
branch  4 taken 1
        2:   42:            number_of_pairs++;
        2:   42-block  0
        -:   43:        }
        -:   44:    }
        1:   45:    return number_of_pairs;
        1:   45-block  0
        -:   46:
        -:   47:}
------------------
        -:   48:
        -:   49:
        -:   50:// Complete method shiftOnce so vec "left shifted" one time
        -:   51:// so shiftNTimes({6, 2, 5, 3}, 1) changes the vector
        -:   52:// argument to {2, 5, 3, 6} and shiftNTimes({6, 2, 5, 3}, 2)
        -:   53:// changes the array argument to {5, 3, 6, 2}. You must
        -:   54:// modify the vector argument by changing the parameter
        -:   55:// array inside method shiftNTimes. Remember, a change to
        -:   56:// the parameter inside the method shiftNTimes changes
        -:   57:// the argument inside the test function.
        -:   58://
        -:   59:// Modify the argument by modifying vec. Do NOT use a return statement.
        -:   60://
        -:   61:template<typename T>
function _Z9shiftOnceIiEvRSt6vectorIT_SaIS1_EE called 3 returned 100% blocks executed 100%
        3:   62:void shiftOnce(vector<T> &vec) {
        3:   63:    if (vec.size() > 0) {
        3:   63-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
        3:   64:        T first_item = vec.at(0);
        3:   64-block  0
call    0 returned 3
        -:   65:        int i;
        9:   66:        for (i = 1; i < vec.size(); i++) {
        9:   66-block  0
call    0 returned 9
branch  1 taken 6
branch  2 taken 3 (fallthrough)
        6:   67:            vec.at(i - 1) = vec.at(i);
        6:   67-block  0
call    0 returned 6
call    1 returned 6
        -:   68:        }
        3:   69:        vec.at(i - 1) = first_item;
        3:   69-block  0
call    0 returned 3
        -:   70:    }
        3:   71:}
        -:   72:
        -:   73:
        -:   74:// Complete method shiftNTimes so vec "left shifted" n times. For
        -:   75:// example, shiftNTimes({6, 2, 5, 3}, 1) changes the vector argument
        -:   76:// to {2, 5, 3, 6} and shiftNTimes({6, 2, 5, 3}, 2) changes the vector
        -:   77:// argument to {5, 3, 6, 2}. You must modify the vector argument by
        -:   78:// changing the parameter array inside method shiftNTimes. Remember,
        -:   79:// a change to the parameter inside the method shiftNTimes changes
        -:   80:// the argument inside the test function
        -:   81://
        -:   82:// shiftNTimes( { 1, 2, 3, 4, 5, 6, 7 }, 3 )
        -:   83:// modifies the argument to { 4, 5, 6, 7, 1, 2, 3 }
        -:   84://
        -:   85:// shiftNTimes( { 1, 2, 3, 4, 5, 6, 7 }, 0 ) modifies nothing
        -:   86://
        -:   87:// shiftNTimes( { "A", "B", "C" }, 5) modifies the vector argument
        -:   88:// to { "C", "A", "B" }
        -:   89://
        -:   90:// shiftNTimes( { 3 }, 5) modifies the vector argument to { 3 }
        -:   91://
        -:   92:// Modify the argument by modifying vec. Do NOT use a return statement.
        -:   93:template<typename T>
function _Z11shiftNTimesIiEvRSt6vectorIT_SaIS1_EEi called 1 returned 100% blocks executed 100%
        1:   94:void shiftNTimes(vector<T> &vec, int numShifts) {
        3:   95:    for (int i = 0; i < numShifts; i++) {
        1:   95-block  0
        3:   95-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   96:        shiftOnce(vec);
        2:   96-block  0
call    0 returned 2
        -:   97:    }
        1:   98:}
        -:   99:
        -:  100:
        -:  101:// Given a filled vector of double elements, return true if
        -:  102:// the sum of all elements is greater than sum. Sum may be
        -:  103:// negative. An empty vector's sum is zero.
        -:  104://
        -:  105:// sumGreaterThan( { 1.1, 2.2, 3.3 }, 4.0) returns true
        -:  106:// sumGreaterThan( { 1.1, 2.2, 3.3 }, 6.6) returns false
        -:  107:// sumGreaterThan( { }, -1.0) returns true
        -:  108://
function _Z14sumGreaterThanRKSt6vectorIdSaIdEEd called 1 returned 100% blocks executed 100%
        1:  109:bool sumGreaterThan(vector<double> const &numbers, double sum) {
        1:  110:    double sum_of_doubles = 0;
        4:  111:    for (int i = 0; i < numbers.size(); i++) {
        1:  111-block  0
        4:  111-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  112:        sum_of_doubles += numbers.at(i);
        3:  112-block  0
call    0 returned 3
        -:  113:    }
        1:  114:    return sum_of_doubles > sum;
        1:  114-block  0
        -:  115:}
        -:  116:
        -:  117:// Complete method howMany to return the number of elements in a
        -:  118:// vector of strings that equals valueToFind. The vector may be empty.
        -:  119://
        -:  120:// howMany({"A", "a", "A", "a" }, "A") returns 2
        -:  121:// howMany({"And", "there", "goes", "another"}, "another") returns 1
        -:  122:// howMany({"And", "there", "goes", "another"}, "Not Here") returns 0
        -:  123:// howMany({ }, "empty array") returns 0
        -:  124://
function _Z7howManyRKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EERKS5_ called 5 returned 100% blocks executed 100%
        5:  125:int howMany(vector<string> const &array, string const &valueToFind) {
        5:  126:    int number_found = 0;
       60:  127:    for (int i = 0; i < array.size(); i++) {
        5:  127-block  0
       55:  127-block  1
       60:  127-block  2
call    0 returned 60
branch  1 taken 55
branch  2 taken 5 (fallthrough)
       55:  128:        if (array.at(i) == valueToFind) {
       55:  128-block  0
call    0 returned 55
call    1 returned 55
branch  2 taken 6 (fallthrough)
branch  3 taken 49
        6:  129:            number_found++;
        6:  129-block  0
        -:  130:        }
        -:  131:    }
        5:  132:    return number_found;
        5:  132-block  0
        -:  133:}
        -:  134:
        -:  135:// Given a vector containing a stream of integers in the
        -:  136:// range of 0..10 (like quiz scores), return an array of 11
        -:  137:// integers where the first value (at index 0) is the number
        -:  138:// of 0s in the vector, the second value (at index 1) is the
        -:  139:// number of ones on the vector, and the 11th value
        -:  140:// (at index 10) is the number of tens in the vector.
        -:  141:// The following assertions must pass.
        -:  142://
        -:  143:// Given the argument vector<int> arg {5,0,7,7,7,9,9,5,8,10};,
        -:  144:// frequency must return a vector that looks like this
        -:  145:// {1,0,0,0,0,2,0,3,1,2,1}
        -:  146://
        -:  147:// Precondition: The vector argument has elements always in the range of 0..10 only.
function _Z9frequencyRKSt6vectorIiSaIiEE called 1 returned 100% blocks executed 67%
        1:  148:vector<int> frequency(vector<int> const &vec) {
        1:  149:    vector<int> freq_vector{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        1:  149-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:  149-block  1
    $$$$$:  149-block  2
call    4 never executed
       12:  150:    for (int i = 0; i < vec.size(); i++) {
       12:  150-block  0
call    0 returned 12
branch  1 taken 11
branch  2 taken 1 (fallthrough)
       11:  151:        freq_vector.at(vec.at(i))++;
       11:  151-block  0
call    0 returned 11
branch  1 taken 11 (fallthrough)
branch  2 taken 0 (throw)
       11:  151-block  1
call    3 returned 11
branch  4 taken 11 (fallthrough)
branch  5 taken 0 (throw)
       11:  151-block  2
        -:  152:    }
        1:  153:    return freq_vector;
        1:  153-block  0
        1:  153-block  1
    =====:  154:}
    $$$$$:  154-block  0
call    0 never executed
        -:  155:
        -:  156:
        -:  157:// Modify the argument reference by with vec so it still
        -:  158:// contains the exact same numbers as the given array but
        -:  159:// rearranged so that all the even numbers come before all
        -:  160:// the odd numbers. Other than that, the ints can be in
        -:  161:// any order. You must modify the vector argument vec by
        -:  162:// changing array in method evensLeft. The array may be
        -:  163:// empty or have only one element so no change should be made.
        -:  164://
        -:  165:// Original vector           Modified vector
        -:  166:// {1, 0, 1, 0, 0, 1, 1}     { 0, 0, 0, 1, 1, 1, 1 }
        -:  167:// {3, 3, 2}                 { 2, 3, 3 }
        -:  168:// {3, -2, -2}               { -2, -2, 3}
        -:  169://
        -:  170:// vec Must be a reference parameter with & so changes made here
        -:  171:// are made to the argument vec is referencing in the unit test.
        -:  172://
        -:  173:// Modify the argument by modifying vec. Do NOT use a return statement
function _Z9evensLeftRSt6vectorIiSaIiEE called 1 returned 100% blocks executed 93%
        1:  174:void evensLeft(vector<int> &vec) {
        1:  175:    vector<int> temp = {};
        1:  175-block  0
call    0 returned 1
        1:  176:    int i = 0;
        8:  177:    while (i < vec.size()) {
        8:  177-block  0
call    0 returned 8
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        7:  178:        if (vec.at(i) % 2 == 0) {
        7:  178-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  178-block  1
branch  3 taken 3 (fallthrough)
branch  4 taken 4
        3:  179:            temp.push_back(vec.at(i));
        3:  179-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  179-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        -:  180:        }
        7:  181:        i++;
        7:  181-block  0
        -:  182:    }
        1:  183:    i = 0;
        8:  184:    while (i < vec.size()) {
        1:  184-block  0
        8:  184-block  1
call    0 returned 8
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        7:  185:        if (vec.at(i) % 2 != 0) {
        7:  185-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  185-block  1
branch  3 taken 4 (fallthrough)
branch  4 taken 3
        4:  186:            temp.push_back(vec.at(i));
        4:  186-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:  186-block  1
call    3 returned 4
branch  4 taken 4 (fallthrough)
branch  5 taken 0 (throw)
        -:  187:        }
        7:  188:        i++;
        7:  188-block  0
        -:  189:    }
        1:  190:    i = 0;
        8:  191:    while (i < vec.size()) {
        1:  191-block  0
        8:  191-block  1
call    0 returned 8
branch  1 taken 7
branch  2 taken 1 (fallthrough)
        7:  192:        vec.at(i) = temp.at(i);
        7:  192-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:  192-block  1
call    3 returned 7
branch  4 taken 7 (fallthrough)
branch  5 taken 0 (throw)
        7:  193:        i++;
        7:  193-block  0
        -:  194:    }
        1:  195:}
        1:  195-block  0
call    0 returned 1
    $$$$$:  195-block  1
call    1 never executed
        -:  196:
        -:  197:
        -:  198:// Return the range of the numbers in an array[].
        -:  199:// The range is the maximum value - minimum value
        -:  200://
        -:  201:// range ({1, 2, 3, 4}) returns 4 - 1 or 3
        -:  202:// range ({1, 2, -3, 4}) returns 4 - -3 or 7
        -:  203:// range ({ 99 }) returns 0
        -:  204://
        -:  205:// Precondition: x.length >= 1
function _Z5rangeRKSt6vectorIiSaIiEE called 1 returned 100% blocks executed 100%
        1:  206:int range(vector<int> const &x) {
        1:  207:    int max = 0;
        1:  208:    int min = 0;
        1:  209:    if (x.size() > 0) {
        1:  209-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  210:        max = x.at(0);
        1:  210-block  0
call    0 returned 1
        1:  211:        min = x.at(0);
call    0 returned 1
        -:  212:    }
        1:  213:    int i = 0;
        6:  214:    while (i < x.size()) {
        1:  214-block  0
        6:  214-block  1
call    0 returned 6
branch  1 taken 5
branch  2 taken 1 (fallthrough)
        5:  215:        if (x.at(i) < min) {
        5:  215-block  0
call    0 returned 5
branch  1 taken 1 (fallthrough)
branch  2 taken 4
        1:  216:            min = x.at(i);
        1:  216-block  0
call    0 returned 1
        -:  217:        }
        5:  218:        if (x.at(i) > max) {
        5:  218-block  0
call    0 returned 5
branch  1 taken 2 (fallthrough)
branch  2 taken 3
        2:  219:            max = x.at(i);
        2:  219-block  0
call    0 returned 2
        -:  220:        }
        5:  221:        i++;
        5:  221-block  0
        -:  222:    }
        1:  223:    return max - min;
        1:  223-block  0
        -:  224:}
        -:  225:
        -:  226:// Consider the series of numbers beginning at start and running
        -:  227:// up to but not including end, so for example start=1 and end=5
        -:  228:// gives the series 1, 2, 3, 4. Return a new vector<std:string>
        -:  229:// containing the string form of these numbers. However for
        -:  230:// multiples of 3, store "Fizz" instead of the number. For
        -:  231:// multiples of 5 use "Buzz". For multiples of both 3 and 5
        -:  232:// use "FizzBuzz". In C++, to_string will make a str::string
        -:  233:// from an int, to_string(12) returns the string literal "12".
        -:  234://
        -:  235:// fizzBuzz(1, 6) returns ["1", "2", "Fizz", "4", "Buzz"]
        -:  236:// fizzBuzz(1, 8) returns ["1", "2", "Fizz", "4", "Buzz", "Fizz", "7"]
        -:  237:// fizzBuzz(14, 21) returns ["14", "FizzBuzz", "16", "17", "Fizz", "19"]
        -:  238://
        -:  239:// Precondition: end > start so the return so vector's size() >= 1
function _Z8fizzBuzzB5cxx11OmS_ called 1 returned 100% blocks executed 59%
        1:  240:vector<string> fizzBuzz(unsigned long &&start, unsigned long &&end) {
        1:  241:    vector<string> return_vector{};
        1:  241-block  0
call    0 returned 1
        1:  242:    int current_num = start;
       16:  243:    while (current_num < end) {
       16:  243-block  0
branch  0 taken 15
branch  1 taken 1 (fallthrough)
       15:  244:        if (current_num % 3 == 0) {
       15:  244-block  0
branch  0 taken 5 (fallthrough)
branch  1 taken 10
        5:  245:            if (current_num % 5 == 0) {
        5:  245-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 4
        1:  246:                return_vector.push_back("FizzBuzz");
        1:  246-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  246-block  1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0 (throw)
        1:  246-block  2
call    7 returned 1
call    8 returned 1
    $$$$$:  246-block  3
call    9 never executed
    $$$$$:  246-block  4
    $$$$$:  246-block  5
call   10 never executed
    $$$$$:  246-block  6
        -:  247:            } else {
        4:  248:                return_vector.push_back("Fizz");
        4:  248-block  0
call    0 returned 4
call    1 returned 4
branch  2 taken 4 (fallthrough)
branch  3 taken 0 (throw)
        4:  248-block  1
call    4 returned 4
branch  5 taken 4 (fallthrough)
branch  6 taken 0 (throw)
        4:  248-block  2
call    7 returned 4
call    8 returned 4
    $$$$$:  248-block  3
call    9 never executed
    $$$$$:  248-block  4
    $$$$$:  248-block  5
call   10 never executed
    $$$$$:  248-block  6
        -:  249:            }
       10:  250:        } else if (current_num % 5 == 0) {
       10:  250-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        2:  251:            return_vector.push_back("Buzz");
        2:  251-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        2:  251-block  1
call    4 returned 2
branch  5 taken 2 (fallthrough)
branch  6 taken 0 (throw)
        2:  251-block  2
call    7 returned 2
call    8 returned 2
    $$$$$:  251-block  3
call    9 never executed
    $$$$$:  251-block  4
    $$$$$:  251-block  5
call   10 never executed
    $$$$$:  251-block  6
        -:  252:        } else {
        8:  253:            return_vector.push_back(to_string(current_num));
        8:  253-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8:  253-block  1
call    3 returned 8
branch  4 taken 8 (fallthrough)
branch  5 taken 0 (throw)
        8:  253-block  2
call    6 returned 8
    $$$$$:  253-block  3
call    7 never executed
    $$$$$:  253-block  4
        -:  254:        }
       15:  255:        current_num++;
       15:  255-block  0
        -:  256:    }
        1:  257:    return return_vector;
        1:  257-block  0
        1:  257-block  1
    =====:  258:}
    $$$$$:  258-block  0
call    0 never executed
        -:  259:
        -:  260:#endif // SRC_VECTORFUN_HPP_
